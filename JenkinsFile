pipeline {
    agent any

    environment {
        DOCKER_HUB_USER = 'code9x'
    }

    stages {
        stage('Checkout Code') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PAT')]) {
                    sh 'git clone https://$GITHUB_USER:$GITHUB_PAT@github.com/Code9X/CICD-Jenkins-Docker.git .'
                }
            }
        }

        stage('Build React Frontend') {
            steps {
                dir('BookingWiz_Web') {
                    sh '''
                    echo "Installing React dependencies..."
                    npm install
                    echo "Building React frontend..."
                    npm run build
                    '''
                }
            }
        }

        stage('Build .NET Backend') {
            steps {
                dir('BookingWiz_Admin') {
                    sh '''
                    echo "Restoring .NET dependencies..."
                    dotnet restore
                    echo "Building .NET backend..."
                    dotnet build --configuration Release
                    echo "Publishing .NET application..."
                    dotnet publish -c Release -o out
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh '''
                echo "Building Docker images..."
                docker build -t $DOCKER_HUB_USER/bookingwiz-frontend:latest -f BookingWiz_Web/Dockerfile .
                docker build -t $DOCKER_HUB_USER/bookingwiz_admin:latest -f BookingWiz_Admin/Dockerfile .
                '''
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'docker-hub-password', variable: 'DOCKER_PASS')]) {
                    sh '''
                    echo "Logging into DockerHub..."
                    echo $DOCKER_PASS | docker login -u $DOCKER_HUB_USER --password-stdin

                    echo "Pushing Docker images..."
                    docker push $DOCKER_HUB_USER/bookingwiz-frontend:latest
                    docker push $DOCKER_HUB_USER/bookingwiz_admin:latest
                    '''
                }
            }
        }

        stage('Deploy without Docker Compose') {
            steps {
                sh '''
                echo "Stopping existing frontend container..."
                docker stop bookingwiz-frontend || true
                docker rm bookingwiz-frontend || true

                echo "Pulling new frontend image..."
                docker pull $DOCKER_HUB_USER/bookingwiz-frontend:latest

                echo "Running frontend container..."
                docker run -d -p 3000:80 --name bookingwiz-frontend $DOCKER_HUB_USER/bookingwiz-frontend:latest

                echo "Stopping existing backend container..."
                docker stop bookingwiz-backend || true
                docker rm bookingwiz-backend || true

                echo "Pulling new backend image..."
                docker pull $DOCKER_HUB_USER/bookingwiz_admin:latest

                echo "Running backend container..."
                docker run -d -p 7001:8080 --name bookingwiz-backend -v $(pwd)/Images:/app/Images $DOCKER_HUB_USER/bookingwiz_admin:latest
                '''
            }
        }
    }

    post {
        always {
            sh '''
            echo "Cleaning up unused Docker resources..."
            docker system prune -f
            '''
        }
    }
}
